"QUERY PLAN"
"Function Scan on cardano_graphql.""getPaymentAddresses"" __get_payment_addresses__  (cost=0.25..68433169.00 rows=1000 width=128) (actual time=1379.860..1381.361 rows=1 loops=1)"
"  Output: __get_payment_addresses__.address, ((NOT (__get_payment_addresses__.* IS NULL)))::text, ((NOT (ROW((__get_payment_addresses__.summary).""assetBalances"", (__get_payment_addresses__.summary).""utxosCount"", (__get_payment_addresses__.summary).""assetCount"") IS NULL)))::text, ((SubPlan 1))::text"
"  Function Call: cardano_graphql.""getPaymentAddresses""('{addr_test1zpd7cjjwcqllzps9uaqtdjy7ytxzk6sg2tmvxzwm9am0pq8xq98rskrmxdgx4hmax4uuqrklkzg0n52fk5gug57g7cts8wt3jz}'::character varying[], NULL::word31type)"
"  Buffers: shared hit=579995 read=21193, temp read=45048 written=45780"
"  SubPlan 1"
"    ->  Hash Right Join  (cost=0.23..68433.15 rows=61929 width=32) (actual time=22.829..888.913 rows=56674 loops=1)"
"          Output: ARRAY[(__frmcdc_asset_balance__.quantity)::text, (__frmcdc_asset_balance__.address)::text, ((NOT (__frmcdc_asset_balance__.* IS NULL)))::text, ((NULL::bytea))::text, ((true))::text, ('the official coin of the network'::text), ('coin'::text), ((NULL::hash28type))::text, ((NULL::asset32type))::text, ((NOT ((ROW('-1'::bigint, NULL::hash28type, NULL::asset32type, NULL::character varying, NULL::bytea, 6, 'the official coin of the network'::text, NULL::text, 'coin'::text, NULL::text, NULL::text, true)) IS NULL)))::text]"
"          Hash Cond: (('-1'::bigint) = __frmcdc_asset_balance__.ident)"
"          Buffers: shared hit=80 read=20495, temp read=39165 written=39165"
"          ->  Append  (cost=0.00..61465.91 rows=1238581 width=186) (actual time=0.008..448.954 rows=1238830 loops=1)"
"                Buffers: shared hit=80 read=20495"
"                ->  Result  (cost=0.00..0.01 rows=1 width=201) (actual time=0.007..0.007 rows=1 loops=1)"
"                      Output: NULL::bytea, true, 'the official coin of the network'::text, 'coin'::text, NULL::hash28type, NULL::asset32type, ROW('-1'::bigint, NULL::hash28type, NULL::asset32type, NULL::character varying, NULL::bytea, 6, 'the official coin of the network'::text, NULL::text, 'coin'::text, NULL::text, NULL::text, true), '-1'::bigint"
"                ->  Subquery Scan on ""*SELECT* 2""  (cost=17.75..55272.99 rows=1238580 width=186) (actual time=0.029..402.905 rows=1238829 loops=1)"
"                      Output: ""*SELECT* 2"".""assetId"", ""*SELECT* 2"".""isCoin"", ""*SELECT* 2"".description, ""*SELECT* 2"".name, ""*SELECT* 2"".""policyId"", ""*SELECT* 2"".""assetName"", ROW(""*SELECT* 2"".ma_id, ""*SELECT* 2"".""policyId"", ""*SELECT* 2"".""assetName"", ""*SELECT* 2"".fingerprint, ""*SELECT* 2"".""assetId"", ""*SELECT* 2"".decimals, ""*SELECT* 2"".description, ""*SELECT* 2"".logo, ""*SELECT* 2"".name, ""*SELECT* 2"".ticker, ""*SELECT* 2"".url, ""*SELECT* 2"".""isCoin""), ""*SELECT* 2"".ma_id"
"                      Buffers: shared hit=80 read=20495"
"                      ->  Hash Left Join  (cost=17.75..42887.19 rows=1238580 width=299) (actual time=0.027..265.875 rows=1238829 loops=1)"
"                            Output: ma.id, ma.policy, ma.name, ma.fingerprint, ((ma.policy)::bytea || (ma.name)::bytea), arc.decimals, arc.description, arc.logo, arc.name, arc.ticker, arc.url, false"
"                            Inner Unique: true"
"                            Hash Cond: ((encode((ma.policy)::bytea, 'hex'::text) = arc.asset_policy) AND (encode((ma.name)::bytea, 'hex'::text) = arc.asset_name))"
"                            Buffers: shared hit=80 read=20495"
"                            ->  Seq Scan on public.multi_asset ma  (cost=0.00..32960.80 rows=1238580 width=102) (actual time=0.015..69.674 rows=1238829 loops=1)"
"                                  Output: ma.id, ma.policy, ma.name, ma.fingerprint"
"                                  Buffers: shared hit=80 read=20495"
"                            ->  Hash  (cost=13.10..13.10 rows=310 width=228) (actual time=0.002..0.003 rows=0 loops=1)"
"                                  Output: arc.decimals, arc.description, arc.logo, arc.name, arc.ticker, arc.url, arc.asset_policy, arc.asset_name"
"                                  Buckets: 1024  Batches: 1  Memory Usage: 8kB"
"                                  ->  Seq Scan on cardano_graphql.asset_registry_cache arc  (cost=0.00..13.10 rows=310 width=228) (actual time=0.002..0.002 rows=0 loops=1)"
"                                        Output: arc.decimals, arc.description, arc.logo, arc.name, arc.ticker, arc.url, arc.asset_policy, arc.asset_name"
"          ->  Hash  (cost=0.10..0.10 rows=10 width=168) (actual time=22.807..22.808 rows=56674 loops=1)"
"                Output: __frmcdc_asset_balance__.quantity, __frmcdc_asset_balance__.address, __frmcdc_asset_balance__.*, __frmcdc_asset_balance__.ident"
"                Buckets: 32768 (originally 1024)  Batches: 4 (originally 1)  Memory Usage: 7937kB"
"                Buffers: temp read=934 written=2491"
"                ->  Function Scan on pg_catalog.unnest __frmcdc_asset_balance__  (cost=0.00..0.10 rows=10 width=168) (actual time=5.261..11.350 rows=56674 loops=1)"
"                      Output: __frmcdc_asset_balance__.quantity, __frmcdc_asset_balance__.address, __frmcdc_asset_balance__.*, __frmcdc_asset_balance__.ident"
"                      Function Call: unnest(((__get_payment_addresses__.summary).""assetBalances""))"
"                      Buffers: temp read=934 written=934"
"Planning:"
"  Buffers: shared read=4"
"Planning Time: 0.899 ms"
"JIT:"
"  Functions: 31"
"  Options: Inlining true, Optimization true, Expressions true, Deforming true"
"  Timing: Generation 2.759 ms, Inlining 8.393 ms, Optimization 98.032 ms, Emission 67.495 ms, Total 176.679 ms"
"Execution Time: 1389.694 ms"